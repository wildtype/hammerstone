#!/usr/bin/env perl
# vi: ft=perl

use strict;
use warnings;
use v5.10;
use utf8;

use Mojo::DOM;
use Mojo::File 'path';

use YAML;
use Text::WikiCreole;
use DateTime::Format::ISO8601;
use Encode qw(encode_utf8 decode_utf8);
use HTML::Packer;
use String::Util 'trim';
use XML::Feed;
use HTML::Escape;

sub Config {
  my $site_path = 'site';

  {
    SiteName => 'prehistoric.me',

    LayoutFile => "$site_path/templates/layout.html",

    IndexTemplateFile => "$site_path/templates/index.html",
    ArchiveTemplateFile => "$site_path/templates/archive.html",
    PostTemplateFile => "$site_path/templates/post.html",

    PostSrcGlob => "$site_path/posts/*.yml",

    ArchivePath => "$site_path/public/archive",
    IndexPath => "$site_path/public",
    FeedPath => "$site_path/public/feed"
  };
}

package Hammerstone {
  use String::Util 'trim';
  use HTML::Escape;
  use Data::Dumper;
  use Mojo::File 'path';

  sub new {
    my ($class, $config) = @_;

    my $self = bless $config, $class;

    return $self->__init;
  }

  sub minify_html {
    my $self = shift;
    my $html = shift;

    return $self->{minifier}->minify(\$html, { remove_newlines => 1 });
  }

  sub clean_public_dir {
    path('public')->remove_tree({keep_root => 1});
  }

  sub copy_static_pages {
    my $self = shift;

    foreach my $page (keys %{$self->{static_pages}}) {
      path(
        $self->{index_path} . "/$page"
      )->make_path;

      path(
        $self->{static_pages}->{$page}
      )->copy_to(
        $self->{index_path} . "/$page/index.html"
      );
    }
  }

  sub post_path {
    my $self = shift;
    my $slug = shift;

    return "site/public/$slug";
  }

  sub feed_index {
    my $self = shift;

    my $feed = XML::Feed->new('RSS', version => '2.0');
    $feed->title('Prehistoric.Me');
    $feed->tagline('Ya, aku bakal dibaca');
    $feed->base('https://prehistoric.me/');
    $feed->link('https://prehistoric.me/feed/index.xml');
    $feed->self_link('https://prehistoric.me/feed/index.xml');
    $feed->author('Mufti');
    $feed->language('id');
    $feed->generator('hammerstone');
    $feed->modified(DateTime->now);

    $feed;
  }

  sub feed_item {
    my $self = shift;
    my $item = shift;

    my $dt = $item->{created_at}->clone;
    $dt->set_time_zone('UTC');

    my $entry = XML::Feed::Entry->new;
    my $entry_link = 'https://prehistoric.me/' . $item->{slug};

    $entry->id('https://prehistoric.me/' . $item->{slug});
    $entry->link($entry_link);
    $entry->title($item->{title});
    $entry->modified($dt);
    $entry->issued($dt);
    $entry->author('dev-null@prehistoric.me (Mufti)');

    my $content;
    if (defined $item->{excerpt}) {
      $content = $item->{excerpt} . "<a href=\"$entry_link\">(lanjutkan membaca...)</a>";
    } else {
      $content = $item->{content};
    }

    $entry->content($content);

    $entry;
  }

  sub __init {
    my $self = shift;

    my $minifier = HTML::Packer->init;

    $self->{minifier} = $minifier;
    $self->__setup_creole_wiki_plugin;

    return $self;
  }

  sub __setup_creole_wiki_plugin {
    my $self = shift;

    my $plugin = sub {
      my ($tag, $words) = split /\s+/, $_[0], 2;

      my $build_blockquote_tag = sub {
        my ($words) = @_;
        return '<blockquote>'.trim(Text::WikiCreole::creole_parse($words)).'</blockquote>';
      };

      my $build_figure_tag = sub {
        my ($src, $size, $caption) = split /\s+/, $_[0], 3;

        my $width = ($size eq 'auto') ? 'auto' : ($size . 'px');
        my $caption_html = trim(Text::WikiCreole::creole_parse($caption));
        my $img_src = $self->{image_base_uri} . $src;

        return <<~HTML;
        <figure style="max-width: $width">
        <img src="$img_src" />
        <figcaption>$caption_html</figcaption>
        </figure>
        HTML
      };

      my $build_abbr_tag = sub  {
        my ($abbr, $title) = split /\s+/, $_[0], 2;

        return qq[<abbr title="$title">$abbr</abbr>];
      };

      my $build_code_tag = sub {
        return '<code>' . escape_html(trim $_[0]) . '</code>';
      };
      my $methods = {
        bq => $build_blockquote_tag,
        abbr => $build_abbr_tag,
        figure => $build_figure_tag,
        c => $build_code_tag
      };

      my $method = $methods->{$tag} || sub { return $_[0]; };

      return $method->($words);
    };

    Text::WikiCreole::creole_plugin($plugin);
  }
}

my $hammerstone = Hammerstone->new(
  {
    image_base_uri => 'https://storage.googleapis.com/static.prehistoric.me/pictures/',
    static_pages => {
      about => 'site/templates/about.html',
      blogroll => 'site/templates/blogroll.html',
    },
    index_path => 'site/public',
  },
);

$hammerstone->clean_public_dir;
$hammerstone->copy_static_pages;


sub load_post_from_yaml {
  my $file_content = path($_)->slurp;
  my ($metadata, $excerpt,  $content) = Load($file_content);

  my $created_at = DateTime::Format::ISO8601
                     ->parse_datetime($metadata->{created_at});
  $created_at->set_locale('id-ID');
  $created_at->set_time_zone('Asia/Jakarta');

  my $post = $metadata;
  $post->{created_at} = $created_at;
  if (defined $content) {
    $post->{content} = decode_utf8 creole_parse $content;
    $post->{excerpt} = decode_utf8 creole_parse $excerpt;
  } else {
    $post->{content} = decode_utf8 creole_parse $excerpt;
    $post->{excerpt} = undef;
  }

  $post;
}

sub descending_created_at {
  $b->{created_at}->compare($a->{created_at});
}

sub write_article_page {
  my ($layout, $template, $post) = @_;

  my $layout_dom = Mojo::DOM->new($layout);
  my $post_dom = Mojo::DOM->new($template);

  my $page_title = "$post->{title} | prehistoric.me";
  my $page_url = "https://prehistoric.me/$post->{slug}";
  $layout_dom->at('title')->content($page_title);

  $layout_dom->at('meta[property="og:title"]')->attr(content => $page_title);
  $layout_dom->at('meta[property="og:type"]')->attr(content => 'article');
  $layout_dom->at('meta[property="og:url"]')->attr(content => $page_url);
  $layout_dom->at('meta[property="og:image"]')->attr(content => 'https://storage.googleapis.com/static.prehistoric.me/pictures/tewet.png');

  my $meta_description = substr(Mojo::DOM->new($post->{content})->all_text, 0, 100);
  $meta_description =~ s/\s+/ /g;
  $layout_dom->at('meta[property="og:description"]')->attr(content => $meta_description);
  $layout_dom->at('meta[property="description"]')->attr(content => $meta_description);

  $post_dom->at('.post__title')->content($post->{title});
  $post_dom->at('.post__timestamp')->content(
    $post->{created_at}->strftime('%d %B %Y')
  );
  $post_dom->at('.post__content')->content($post->{content});

  $layout_dom->at('header')->append($post_dom);

  path($hammerstone->post_path($post->{slug}))
  ->make_path
  ->child('index.html')
  ->spurt(
    encode_utf8 $hammerstone->minify_html($layout_dom->to_string)
  );
}

sub article_list_item {
  my ($template, $post) = @_;
  my $item = Mojo::DOM->new(
    $template->to_string
  );

  my $link = $item->at('.post-list__link');
  $link->content($post->{title});
  $link->attr(href => "/$post->{slug}/");

  $item->at('.post-list__timestamp')->content(
    $post->{created_at}->strftime('%d %b %Y')
  );

  $item;
}

sub article_excerpt_for_index {
  my ($template, $post) = @_;
  my $article = Mojo::DOM->new(
    $template->to_string
  );
  my $url = "/$post->{slug}/";
  my $link = $article->at('.post__link');

  $link->content($post->{title});
  $link->attr(href => $url);

  $article->at('.post__timestamp')->content(
    $post->{created_at}->strftime('%d %B %Y')
  );

  if (defined $post->{excerpt}) {
    $article->at('.post__content')->content($post->{excerpt});
    $article->append_content("<p><a href=\"$url\">Lanjutkan membaca &rarr;</a></p>");
  } else {
    $article->at('.post__content')->content($post->{content});
  }

  $article->append_content('<hr>');

  $article;
}

sub load_all_posts {
  sort descending_created_at map(
    load_post_from_yaml,
    glob(Config->{PostSrcGlob})
  );
}

sub write_archive_page {
  my ($layout, $html) = @_;

  my $layout_dom = Mojo::DOM->new($layout);

  $layout_dom->at('title')->content('Archive | prehistoric.me');

  $layout_dom->at('meta[property="og:title"]')->attr(content => 'Archive | prehistoric.me');
  $layout_dom->at('meta[property="og:type"]')->attr(content => 'website');
  $layout_dom->at('meta[property="og:url"]')->attr(content => 'https://prehistoric.me/archive');
  $layout_dom->at('meta[property="og:image"]')->attr(content => 'https://storage.googleapis.com/static.prehistoric.me/pictures/tewet.png');
  $layout_dom->at('meta[property="og:description"]')->attr(content => 'Yes, I will be read');
  $layout_dom->at('meta[property="description"]')->attr(content => 'Yes, I will be read');

  $layout_dom->at('header')->append($html);

  path(
    Config->{ArchivePath}
  )->make_path->child('index.html')->spurt(
    encode_utf8 $hammerstone->minify_html($layout_dom->to_string)
  );
}

sub write_index_page {
  my ($layout, $html) = @_;

  my $layout_dom = Mojo::DOM->new($layout);
  $layout_dom->at('title')->content('prehistoric.me');

  $layout_dom->at('meta[property="og:title"]')->attr(content => 'prehistoric.me -- Yes, I will be read');
  $layout_dom->at('meta[property="og:type"]')->attr(content => 'website');
  $layout_dom->at('meta[property="og:url"]')->attr(content => 'https://prehistoric.me');
  $layout_dom->at('meta[property="og:image"]')->attr(content => 'https://storage.googleapis.com/static.prehistoric.me/pictures/tewet.png');
  $layout_dom->at('meta[property="og:description"]')->attr(content => 'Yes, I will be read');
  $layout_dom->at('meta[property="description"]')->attr(content => 'Yes, I will be read');

  $layout_dom->at('header')->append($html);

  path(
    Config->{IndexPath}
  )->child('index.html')->spurt(
    encode_utf8 $hammerstone->minify_html($layout_dom->to_string)
  );
}

sub write_feed_xml {
  my ($xml) = @_;

  path(
    Config->{FeedPath}
  )->make_path->child('index.xml')->spurt(
    encode_utf8 $hammerstone->minify_html($xml)
  );
}

my @posts = load_all_posts;

my $layout = path(
  Config->{LayoutFile}
)->slurp;

my $post_template =  path(
  Config->{PostTemplateFile}
)->slurp;

my $archive_template = path(
  Config->{ArchiveTemplateFile}
)->slurp;

my $index_template = path(
  Config->{IndexTemplateFile}
)->slurp;

my $feed = $hammerstone->feed_index;

my $archive_dom = Mojo::DOM->new($archive_template);
my $list_item_template = $archive_dom->at('.post-list__item');
my $post_list = $archive_dom->at('.post-list');

my $index_dom = Mojo::DOM->new($index_template);
my $index_article_template = $index_dom->at('article');
my $index_main = $index_dom->at('main');

$index_main->content('');
$post_list->content('');

foreach my $post (@posts) {
  write_article_page($layout, $post_template, $post);

  $post_list->append_content(
    article_list_item($list_item_template, $post)
  );

  $feed->add_entry(
    $hammerstone->feed_item($post)
  );
}

write_archive_page($layout, $archive_dom->to_string);
write_feed_xml($feed->as_xml);

foreach my $post (@posts[0..4]) {
  $index_main->append_content(
    article_excerpt_for_index($index_article_template, $post)
  );
}

write_index_page($layout, $index_dom->to_string);
