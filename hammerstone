#!/usr/bin/env perl
# vi: ft=perl

use strict;
use warnings;
use v5.10;
use utf8;

use Mojo::DOM;
use Mojo::File 'path';

use YAML;
use Text::WikiCreole;
use DateTime::Format::ISO8601;
use Encode qw(encode_utf8 decode_utf8);
use HTML::Packer;
use String::Util 'trim';

my $minifier = HTML::Packer->init;
my $mini_opts = { remove_newlines => 1 };

sub Config {
  my $site_name = 'prehistoric.me';

  {
    SiteName => 'prehistoric.me',

    IndexTemplateFile => "$site_name/templates/index.html",
    ArchiveTemplateFile => "$site_name/templates/archive.html",
    PostTemplateFile => "$site_name/templates/post.html",

    PostSrcGlob => "$site_name/posts/*.yml",
    PostPath => sub { "$site_name/public/$_[0]" },

    ArchivePath => "$site_name/public/archive",
    IndexPath => "$site_name/public",

    Statics => {
      about => "$site_name/templates/about.html",
      blogroll => "$site_name/templates/blogroll.html"
    }
  };
}

sub load_post_from_yaml {
  my $file_content = path($_)->slurp;
  my ($metadata, $excerpt,  $content) = Load($file_content);

  my $created_at = DateTime::Format::ISO8601
                     ->parse_datetime($metadata->{created_at});
  $created_at->set_locale('id-ID');
  $created_at->set_time_zone('Asia/Jakarta');

  my $post = $metadata;
  $post->{created_at} = $created_at;
  if (defined $content) {
    $post->{content} = decode_utf8 creole_parse $content;
    $post->{excerpt} = decode_utf8 creole_parse $excerpt;
  } else {
    $post->{content} = decode_utf8 creole_parse $excerpt;
    $post->{excerpt} = undef;
  }

  $post;
}

sub descending_created_at {
  $b->{created_at}->compare($a->{created_at});
}

sub generate_post_html {
  my ($template, $post) = @_;
  my $post_dom = Mojo::DOM->new($template);

  $post_dom->at('title')->content("$post->{title} | prehistoric.me");
  $post_dom->at('.post__title')->content($post->{title});
  $post_dom->at('.post__timestamp')->content(
    $post->{created_at}->strftime('%d %B %Y')
  );
  $post_dom->at('.post__content')->content($post->{content});

  path(Config->{PostPath}->($post->{slug}))
  ->make_path
  ->child('index.html')
  ->spurt(
    encode_utf8 $minifier->minify(\$post_dom->to_string, $mini_opts)
  );
}

sub article_list_item {
  my ($template, $post) = @_;
  my $item = Mojo::DOM->new(
    $template->to_string
  );

  my $link = $item->at('.post-list__link');
  $link->content($post->{title});
  $link->attr(href => "/$post->{slug}/");

  $item->at('.post-list__timestamp')->content(
    $post->{created_at}->strftime('%d %B %Y')
  );

  $item;
}

sub article_excerpt_for_index {
  my ($template, $post) = @_;
  my $article = Mojo::DOM->new(
    $template->to_string
  );
  my $url = "/$post->{slug}/";
  my $link = $article->at('.post__link');

  $link->content($post->{title});
  $link->attr(href => $url);

  $article->at('.post__timestamp')->content(
    $post->{created_at}->strftime('%d %B %Y')
  );

  if (defined $post->{excerpt}) {
    $article->at('.post__content')->content($post->{excerpt});
    $article->append_content("<p><a href=\"$url\">Lanjutkan membaca &rarr;</a></p>");
  } else {
    $article->at('.post__content')->content($post->{content});
  }

  $article->append_content('<hr>');

  $article;
}

sub clean_public_dir {
  path('public')->remove_tree({keep_root => 1});
}

sub load_all_posts {
  sort descending_created_at map(
    load_post_from_yaml,
    glob(Config->{PostSrcGlob})
  );
}

sub setup_creole_wiki_plugin {
  my $plugin = sub {
    my ($tag, $words) = split /\s+/, $_[0], 2;

    if ($tag eq 'bq') {
      return '<blockquote>'.trim(creole_parse($words)).'</blockquote>';
    } elsif ($tag eq 'caption') {
      return '<p class="image-caption">'.$words.'</p>';
    }
  };

  creole_plugin($plugin);
}

sub write_archive_page {
  my ($html) = @_;

  path(
    Config->{ArchivePath}
  )->make_path->child('index.html')->spurt(
    encode_utf8 $minifier->minify(\$html, $mini_opts)
  );
}

sub write_index_page {
  my ($html) = @_;

  path(
    Config->{IndexPath}
  )->child('index.html')->spurt(
    encode_utf8 $minifier->minify(\$html, $mini_opts)
  );
}

sub copy_static_pages {
  foreach my $page (keys %{Config->{Statics}}) {
    path(
      Config->{IndexPath} . "/$page"
    )->make_path;

    path(
      Config->{Statics}->{$page}
    )->copy_to(
      Config->{IndexPath} . "/$page/index.html"
    );
  }
}

setup_creole_wiki_plugin;
clean_public_dir;
copy_static_pages;

my @posts = load_all_posts;

my $post_template =  path(
  Config->{PostTemplateFile}
)->slurp;

my $archive_template = path(
  Config->{ArchiveTemplateFile}
)->slurp;

my $index_template = path(
  Config->{IndexTemplateFile}
)->slurp;

my $archive_dom = Mojo::DOM->new($archive_template);
my $list_item_template = $archive_dom->at('.post-list__item');
my $post_list = $archive_dom->at('.post-list');

my $index_dom = Mojo::DOM->new($index_template);
my $index_article_template = $index_dom->at('article');
my $index_main = $index_dom->at('main');

$index_main->content('');
$post_list->content('');

foreach my $post (@posts) {
  generate_post_html($post_template, $post);

  $post_list->append_content(
    article_list_item($list_item_template, $post)
  );

  $index_main->append_content(
    article_excerpt_for_index($index_article_template, $post)
  );
}

write_archive_page($archive_dom->to_string);
write_index_page($index_dom->to_string);
