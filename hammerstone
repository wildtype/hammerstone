#!/usr/bin/env perl
# vi: ft=perl

use strict;
use warnings;
use v5.10;
use utf8;

use Mojo::DOM;
use Mojo::File 'path';

use YAML;
use DateTime::Format::ISO8601;
use Encode qw(encode_utf8 decode_utf8);
use HTML::Packer;
use XML::Feed;
use HTML::Escape;

sub Config {
  my $site_path = 'site';

  {
    SiteName => 'prehistoric.me',

    LayoutFile => "$site_path/templates/layout.html",

    IndexTemplateFile => "$site_path/templates/index.html",
    ArchiveTemplateFile => "$site_path/templates/archive.html",
    PostTemplateFile => "$site_path/templates/post.html",


    ArchivePath => "$site_path/public/archive",
    IndexPath => "$site_path/public"
  };
}

{
  package Post;
  use Mojo::File 'path';
  use YAML;
  use DateTime::Format::ISO8601;
  use Encode qw(encode_utf8 decode_utf8);
  use Text::WikiCreole;
  use String::Util 'trim';
  use HTML::Escape;

  our $AUTOLOAD;

  sub new {
    my $class = shift;
    my $config = shift;
    my $self = bless $config, $class;

    return $self;
  }

  sub AUTOLOAD : lvalue {
    my $self = shift;
    my $rvalue = shift;

    my $method = $AUTOLOAD;
    $method =~ s/Post:://;

    die "NoMethodError: $method" unless (
      grep /^$method$/, qw(title slug content excerpt created_at DESTROY)
    );

    if (defined $rvalue) {
      $self->{$method} = $rvalue;
    }

    return $self->{$method};
  }

  sub load_all {
    my $class = shift;
    my $post_src_glob = shift;

    my $descending_by_created_at = sub {
      $b->created_at->compare($a->created_at);
    };

    return sort $descending_by_created_at map(
      $class->__load_from_yaml($_),
      glob($post_src_glob)
    );
  }

  sub __load_from_yaml {
    my $class = shift;
    my $yaml = shift;

    my $file_content = path($yaml)->slurp;
    my ($metadata, $excerpt,  $content) = Load($file_content);

    my $created_at = DateTime::Format::ISO8601
      ->parse_datetime($metadata->{created_at});
    $created_at->set_locale('id-ID');
    $created_at->set_time_zone('Asia/Jakarta');

    my $post = $class->new({
      title       => $metadata->{title},
      slug        => $metadata->{slug},
    });

    $post->created_at = $created_at;

    if (defined $content) {
      $post->content = decode_utf8 creole_parse $content;
      $post->excerpt = decode_utf8 creole_parse $excerpt;
    } else {
      $post->content = decode_utf8 creole_parse $excerpt;
      $post->excerpt = undef;
    }

    return $post;
  }
}

{
  package Page;
  use Mojo::DOM;
  use Encode qw(encode_utf8 decode_utf8);

  sub new {
    my ($class, $config) = @_;
    my $self = bless $config, $class;
    return $self->__init;
  }

  sub template {
    my $self = shift;
    return $self->{template};
  }

  sub layout {
    my $self = shift;
    return $self->{layout};
  }

  sub __init {
    my $self = shift;

    $self->{template} = Mojo::DOM->new($self->{template_file});
    $self->{layout} = Mojo::DOM->new($self->{layout_file});

    return $self;
  }
}

{
  package PostPage;
  use base 'Page';
  use Encode qw(encode_utf8 decode_utf8);
  use Mojo::File 'path';

  sub post {
    my $self = shift;
    return $self->{post};
  }

  sub meta_description {
    my $self = shift;
    return substr(
      Mojo::DOM->new($self->{post}->content)->all_text, 0, 100
    ) =~ s/\s+/ /gr;
  }

  sub title {
    my $self = shift;
    return $self->post->title . ' | prehistoric.me';
  }

  sub url {
    my $self = shift;
    return 'https://prehistoric.me/' . $self->post->slug;
  }

  sub file_path {
    my $self = shift;
    return 'site/public/' . $self->post->slug;
  }

  sub render {
    my $self = shift;
    return $self->{rendered} if $self->{rendered};

    $self->__write_metadata;

    $self->template->at('.post__title')->content($self->post->title);
    $self->template->at('.post__timestamp')->content(
      $self->post->created_at->strftime('%d %B %Y')
    );
    $self->template->at('.post__content')->content($self->post->content);
    $self->layout->at('header')->append($self->template);

    $self->{rendered} = $self->{minifier}->($self->layout->to_string);

    return $self->{rendered};
  }

  sub write_file {
    my $self = shift;

    path($self->file_path)
      ->make_path
      ->child('index.html')
      ->spurt(encode_utf8 $self->render);
  }

  sub __write_metadata {
    my $self = shift;
    return $self if $self->{metadata_written};

    $self->layout->at('title')->content($self->title);
    $self->layout->at('meta[property="og:title"]')->attr(content => $self->title);
    $self->layout->at('meta[property="og:type"]')->attr(content => 'article');
    $self->layout->at('meta[property="og:url"]')->attr(content => $self->url);
    $self->layout->at('meta[property="og:image"]')->attr(
      content => 'https://storage.googleapis.com/static.prehistoric.me/pictures/tewet.png'
    );
    $self->layout->at('meta[property="og:description"]')->attr(content => $self->meta_description);
    $self->layout->at('meta[property="description"]')->attr(content => $self->meta_description);

    $self->{metadata_written} = 1;

    return $self;
  }
}

{
  package Hammerstone;
  use YAML;
  use Text::WikiCreole;
  use String::Util 'trim';
  use HTML::Escape;
  use Data::Dumper;
  use Mojo::File 'path';
  use Encode qw(encode_utf8 decode_utf8);

  sub new {
    my ($class, $config) = @_;
    my $self = bless $config, $class;
    return $self->__init;
  }

  sub minify_html {
    my $self = shift;
    my $html = shift;

    return $self->{minifier}->minify(\$html, { remove_newlines => 1 });
  }

  sub clean_public_dir {
    my $self = shift;
    path($self->{index_path})->remove_tree({keep_root => 1});
  }

  sub copy_static_pages {
    my $self = shift;

    foreach my $page (keys %{$self->{static_pages}}) {
      path(
        $self->{index_path} . "/$page"
      )->make_path;

      path(
        $self->{static_pages}->{$page}
      )->copy_to(
        $self->{index_path} . "/$page/index.html"
      );
    }
  }

  sub write_feed_file {
    my $self = shift;

    path($self->{feed_path})
      ->make_path
      ->child('index.xml')
      ->spurt(
      encode_utf8($self->minify_html($self->{feed}->as_xml))
    );
  }

  sub add_feed_item {
    my $self = shift;
    my $item = shift;

    my $dt = $item->created_at->clone;
    $dt->set_time_zone('UTC');

    my $entry = XML::Feed::Entry->new;
    my $entry_link = $self->{site_base} . $item->slug;

    $entry->id($entry_link);
    $entry->link($entry_link);
    $entry->title($item->title);
    $entry->modified($dt);
    $entry->issued($dt);
    $entry->author($self->{site_author_full});

    my $content;
    if (defined $item->excerpt) {
      $content = $item->excerpt . "<a href=\"$entry_link\">(lanjutkan membaca...)</a>";
    } else {
      $content = $item->content;
    }

    $entry->content($content);
    $self->{feed}->add_entry($entry);

    return $self;
  }

  sub posts {
    my $self = shift;

    return $self->{posts} if $self->{posts};
    $self->{posts} = Post->load_all($self->{post_src_glob});

    return $self->{posts};
  }

  sub __init {
    my $self = shift;

    my $minifier = HTML::Packer->init;

    $self->{minifier} = $minifier;
    $self->__setup_creole_wiki_plugin;
    $self->__init_feed;

    return $self;
  }

  sub __init_feed {
    my $self = shift;

    return $self->{feed} if $self->{feed};

    $self->{feed} = XML::Feed->new('RSS', version => '2.0');
    $self->{feed}->title($self->{site_title});
    $self->{feed}->tagline($self->{site_tagline});
    $self->{feed}->base($self->{site_base});
    $self->{feed}->link($self->{site_feed_link});
    $self->{feed}->self_link($self->{site_feed_link});
    $self->{feed}->author($self->{site_author});
    $self->{feed}->language($self->{site_language});
    $self->{feed}->generator($self->{site_generator});
    $self->{feed}->modified(DateTime->now);

    return $self;
  }

  sub __setup_creole_wiki_plugin {
    my $self = shift;

    my $plugin = sub {
      my ($tag, $words) = split /\s+/, $_[0], 2;

      my $build_blockquote_tag = sub {
        my ($quoted) = @_;
        return '<blockquote>'.trim(creole_parse($quoted)).'</blockquote>';
      };

      my $build_figure_tag = sub {
        my ($src, $size, $caption) = split /\s+/, $_[0], 3;

        my $width = ($size eq 'auto') ? 'auto' : ($size . 'px');
        my $caption_html = trim(creole_parse($caption));
        my $img_src = $self->{image_base_uri} . $src;

        return <<~HTML;
        <figure style="max-width: $width">
        <img src="$img_src" />
        <figcaption>$caption_html</figcaption>
        </figure>
        HTML
      };

      my $build_abbr_tag = sub  {
        my ($abbr, $title) = split /\s+/, $_[0], 2;

        return qq[<abbr title="$title">$abbr</abbr>];
      };

      my $build_code_tag = sub {
        return '<code>' . escape_html(trim $_[0]) . '</code>';
      };
      my $methods = {
        bq => $build_blockquote_tag,
        abbr => $build_abbr_tag,
        figure => $build_figure_tag,
        c => $build_code_tag
      };

      my $method = $methods->{$tag} || sub { return $_[0]; };

      return $method->($words);
    };

    creole_plugin($plugin);
  }
}

my $hammerstone = Hammerstone->new(
  {
    image_base_uri => 'https://storage.googleapis.com/static.prehistoric.me/pictures/',
    static_pages   => {
      about    => 'site/templates/about.html',
      blogroll => 'site/templates/blogroll.html',
    },
    index_path     => 'site/public',
    feed_path      => "site/public/feed",
    post_src_glob  => "site/posts/*.yml",

    site_title     => 'Prehistoric.Me',
    site_tagline   => 'Ya, aku bakal dibaca',
    site_base      => 'https://prehistoric.me/',
    site_feed_link => 'https://prehistoric.me/feed/index.xml',
    site_author    => 'Mufti',
    site_author_full => 'dev-null@prehistoric.me (Mufti)',
    site_language  => 'id',
    site_generator => 'hammerstone',
  },
);

$hammerstone->clean_public_dir;
$hammerstone->copy_static_pages;

sub article_list_item {
  my ($template, $post) = @_;
  my $item = Mojo::DOM->new(
    $template->to_string
  );

  my $link = $item->at('.post-list__link');
  $link->content($post->{title});
  $link->attr(href => "/$post->{slug}/");

  $item->at('.post-list__timestamp')->content(
    $post->{created_at}->strftime('%d %b %Y')
  );

  $item;
}

sub article_excerpt_for_index {
  my ($template, $post) = @_;
  my $article = Mojo::DOM->new(
    $template->to_string
  );
  my $url = "/$post->{slug}/";
  my $link = $article->at('.post__link');

  $link->content($post->{title});
  $link->attr(href => $url);

  $article->at('.post__timestamp')->content(
    $post->{created_at}->strftime('%d %B %Y')
  );

  if (defined $post->{excerpt}) {
    $article->at('.post__content')->content($post->{excerpt});
    $article->append_content("<p><a href=\"$url\">Lanjutkan membaca &rarr;</a></p>");
  } else {
    $article->at('.post__content')->content($post->{content});
  }

  $article->append_content('<hr>');

  $article;
}

sub write_archive_page {
  my ($layout, $html) = @_;

  my $layout_dom = Mojo::DOM->new($layout);

  $layout_dom->at('title')->content('Archive | prehistoric.me');

  $layout_dom->at('meta[property="og:title"]')->attr(content => 'Archive | prehistoric.me');
  $layout_dom->at('meta[property="og:type"]')->attr(content => 'website');
  $layout_dom->at('meta[property="og:url"]')->attr(content => 'https://prehistoric.me/archive');
  $layout_dom->at('meta[property="og:image"]')->attr(content => 'https://storage.googleapis.com/static.prehistoric.me/pictures/tewet.png');
  $layout_dom->at('meta[property="og:description"]')->attr(content => 'Yes, I will be read');
  $layout_dom->at('meta[property="description"]')->attr(content => 'Yes, I will be read');

  $layout_dom->at('header')->append($html);

  path(
    Config->{ArchivePath}
  )->make_path->child('index.html')->spurt(
    encode_utf8 $hammerstone->minify_html($layout_dom->to_string)
  );
}

sub write_index_page {
  my ($layout, $html) = @_;

  my $layout_dom = Mojo::DOM->new($layout);
  $layout_dom->at('title')->content('prehistoric.me');

  $layout_dom->at('meta[property="og:title"]')->attr(content => 'prehistoric.me -- Yes, I will be read');
  $layout_dom->at('meta[property="og:type"]')->attr(content => 'website');
  $layout_dom->at('meta[property="og:url"]')->attr(content => 'https://prehistoric.me');
  $layout_dom->at('meta[property="og:image"]')->attr(content => 'https://storage.googleapis.com/static.prehistoric.me/pictures/tewet.png');
  $layout_dom->at('meta[property="og:description"]')->attr(content => 'Yes, I will be read');
  $layout_dom->at('meta[property="description"]')->attr(content => 'Yes, I will be read');

  $layout_dom->at('header')->append($html);

  path(
    Config->{IndexPath}
  )->child('index.html')->spurt(
    encode_utf8 $hammerstone->minify_html($layout_dom->to_string)
  );
}

my @posts = Post->load_all($hammerstone->{post_src_glob});

my $layout = path(
  Config->{LayoutFile}
)->slurp;

my $post_template =  path(
  Config->{PostTemplateFile}
)->slurp;

my $archive_template = path(
  Config->{ArchiveTemplateFile}
)->slurp;

my $index_template = path(
  Config->{IndexTemplateFile}
)->slurp;

my $archive_dom = Mojo::DOM->new($archive_template);
my $list_item_template = $archive_dom->at('.post-list__item');
my $post_list = $archive_dom->at('.post-list');

my $index_dom = Mojo::DOM->new($index_template);
my $index_article_template = $index_dom->at('article');
my $index_main = $index_dom->at('main');

$index_main->content('');
$post_list->content('');

foreach my $post (@posts) {
  PostPage->new(
    {
      layout_file   => $layout,
      template_file => $post_template,
      minifier      => sub { $hammerstone->minify_html(@_) },
      post          => $post
    }
  )->write_file;
  $hammerstone->add_feed_item($post);

  $post_list->append_content(
    article_list_item($list_item_template, $post)
  );
}

write_archive_page($layout, $archive_dom->to_string);

foreach my $post (@posts[0..4]) {
  $index_main->append_content(
    article_excerpt_for_index($index_article_template, $post)
  );
}

write_index_page($layout, $index_dom->to_string);
$hammerstone->write_feed_file;
